// Generated by CoffeeScript 1.10.0
(function() {
  var AUTOLOAD, addAlert, ref, serverAddressInput, updateServer;

  Bugsnag.metaData = {
    platformId: cordova.platformId,
    platformVersion: cordova.platformVersion,
    deviceVersion: (ref = window.device) != null ? ref.version : void 0
  };

  AUTOLOAD = true;

  window.registerServer = function(serverAddress) {
    var name;
    if (serverAddress == null) {
      serverAddress = $('#serverAddress').val().trim().toLowerCase();
    }
    if (serverAddress.length === 0) {
      serverAddress = 'https://demo.rocket.chat';
    }
    if (!/^https?:\/\/.+/.test(serverAddress)) {
      serverAddress = 'http://' + serverAddress;
    }
    name = serverAddress.replace(/https?:\/\//, '').replace(/^www\./, '');
    $(document.body).addClass('loading');
    $('.loading-text').text(cordovai18n("Validating_server"));
    return setTimeout(function() {
      return Servers.registerServer(name, serverAddress, function(err) {
        if (err != null) {
          console.error(cordovai18n("Failed_to_register_the_server_s_s", serverAddress, err));
          return setTimeout(function() {
            $('#serverAddress').addClass('error');
            addAlert({
              type: 'danger',
              message: err
            });
            return $(document.body).removeClass('loading');
          }, 1500);
        }
        refreshServerList();
        $('.loading-text').text(cordovai18n("Downloading_files"));
        return Servers.downloadServer(serverAddress, function(status) {
          if (status.done === true) {
            $('.loading-text').text(cordovai18n("Loading_s", serverAddress));
            return Servers.save(function() {
              return Servers.startServer(serverAddress, function() {});
            });
          } else {
            return $('.loading-text').html(cordovai18n("Downloading_files_s_s", status.count, status.total));
          }
        });
      });
    }, 250);
  };

  updateServer = function(url, version) {
    var name, server;
    server = Servers.getServer(url);
    if (server == null) {
      return;
    }
    if (server.info.version === version) {
      return;
    }
    $(document.body).addClass('loading');
    $('.loading-text').text(cordovai18n("Updating_files"));
    name = server.name;
    return Servers.updateServer(url, function(status) {
      if (status.done === true) {
        $('.loading-text').text(cordovai18n("Loading_s", server.name));
        Servers.save();
        return Servers.startServer(url, function() {});
      } else {
        return $('.loading-text').html(cordovai18n("Updating_files_s_s", status.count, status.total));
      }
    });
  };

  serverAddressInput = function() {
    if ($('#serverAddress').hasClass('error')) {
      return setTimeout(function() {
        $('#serverAddress').removeClass('error');
        return $('#alert-messages').empty();
      }, 1000);
    }
  };

  addAlert = function(alertObj) {
    if (!_.isString(alertObj.type) || !_.isString(alertObj.message)) {
      console.warn('The alertObj', alertObj, 'is not a valid alert object, requires both type and message properties');
      return;
    }
    return $('#alert-messages').append("<div class='alert alert-" + alertObj.type + "' role='alert'>" + alertObj.message + "</div>");
  };

  window.configurePush = function() {
    var config;
    config = {
      ios: {
        alert: "true",
        badge: "true",
        sound: "true"
      },
      android: {
        senderID: ANDROID_SENDER_ID,
        sound: true,
        vibrate: true
      }
    };
    window.push = PushNotification.init(config);
    push.on('notification', function(data) {
      var host, path, ref1;
      if (data.additionalData.foreground === true) {
        return;
      }
      if (typeof data.additionalData.ejson === 'string') {
        data.additionalData.ejson = JSON.parse(data.additionalData.ejson);
      }
      host = data.additionalData.ejson.host;
      if (host == null) {
        return;
      }
      host = host.replace(/\/$/, '');
      if (Servers.serverExists(host) !== true) {
        return;
      }
      AUTOLOAD = false;
      if (((ref1 = data.additionalData.ejson) != null ? ref1.rid : void 0) == null) {
        return;
      }
      path = '';
      switch (data.additionalData.ejson.type) {
        case 'c':
          path = 'channel/' + data.additionalData.ejson.name;
          break;
        case 'p':
          path = 'group/' + data.additionalData.ejson.name;
          break;
        case 'd':
          path = 'direct/' + data.additionalData.ejson.sender.username;
      }
      return Servers.startServer(host, path, function(err, url) {
        if (err != null) {
          return console.log(err);
        }
      });
    });
    return push.on('error', function(data) {
      return console.log('err', data);
    });
  };

  window.loadLastActiveServer = function() {
    var activeServer;
    activeServer = Servers.getActiveServer();
    if (activeServer != null) {
      $(document.body).addClass('loading');
      $('.loading-text').text(cordovai18n("Loading_s", activeServer.name));
      return Servers.startServer(activeServer.url, function(err, url) {
        if (err != null) {
          return console.log(err);
        }
      });
    }
  };

  document.addEventListener("deviceready", function() {
    var i, item, key, len, query, queryString, ref1, ref2, ref3, ref4, ref5, ref6, value;
    navigator.appInfo.getAppInfo(function(appInfo) {
      Bugsnag.appVersion = appInfo.version;
      Bugsnag.metaData.version = appInfo.version;
      return Bugsnag.metaData.build = appInfo.build;
    });
    queryString = location.search.replace(/^\?/, '');
    query = {};
    if (queryString.length > 0) {
      ref1 = queryString.split('&');
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        ref2 = item.split('='), key = ref2[0], value = ref2[1];
        query[key] = value || true;
      }
    }
    if ((ref3 = cordova.plugins) != null) {
      if ((ref4 = ref3.Keyboard) != null) {
        if (typeof ref4.hideKeyboardAccessoryBar === "function") {
          ref4.hideKeyboardAccessoryBar(true);
        }
      }
    }
    if ((ref5 = cordova.plugins) != null) {
      if ((ref6 = ref5.Keyboard) != null) {
        if (typeof ref6.disableScroll === "function") {
          ref6.disableScroll(true);
        }
      }
    }
    $('form').on('submit', function(e) {
      e.preventDefault();
      e.stopPropagation();
      cordova.plugins.Keyboard.close();
      return setTimeout(function() {
        return registerServer();
      }, 100);
    });
    $('.server-list-info').on('click', function(e) {
      return toggleServerList();
    });
    $('#serverAddress').on('input', serverAddressInput);
    return Servers.onLoad(function() {
      configurePush();
      refreshServerList();
      navigator.splashscreen.hide();
      if (query.updateServer != null) {
        return updateServer(decodeURIComponent(query.updateServer), decodeURIComponent(query.version));
      }
      if (query.addServer == null) {
        return setTimeout(function() {
          if (AUTOLOAD === true) {
            return loadLastActiveServer();
          }
        }, 200);
      }
    });
  });

}).call(this);
